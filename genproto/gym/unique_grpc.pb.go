// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: unique.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UniqueService_CreateUnique_FullMethodName = "/unique.UniqueService/CreateUnique"
	UniqueService_UpdateUnique_FullMethodName = "/unique.UniqueService/UpdateUnique"
	UniqueService_DeleteUnique_FullMethodName = "/unique.UniqueService/DeleteUnique"
	UniqueService_ListUnique_FullMethodName   = "/unique.UniqueService/ListUnique"
	UniqueService_GetUnique_FullMethodName    = "/unique.UniqueService/GetUnique"
)

// UniqueServiceClient is the client API for UniqueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniqueServiceClient interface {
	CreateUnique(ctx context.Context, in *CreateUniqueRequest, opts ...grpc.CallOption) (*CreateUniqueResponse, error)
	UpdateUnique(ctx context.Context, in *UpdateUniqueRequest, opts ...grpc.CallOption) (*UpdateUniqueResponse, error)
	DeleteUnique(ctx context.Context, in *DeleteUniqueRequest, opts ...grpc.CallOption) (*DeleteUniqueResponse, error)
	ListUnique(ctx context.Context, in *ListUniqueRequest, opts ...grpc.CallOption) (*ListUniquesResponse, error)
	GetUnique(ctx context.Context, in *GetUniqueRequest, opts ...grpc.CallOption) (*GetUniqueResponse, error)
}

type uniqueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUniqueServiceClient(cc grpc.ClientConnInterface) UniqueServiceClient {
	return &uniqueServiceClient{cc}
}

func (c *uniqueServiceClient) CreateUnique(ctx context.Context, in *CreateUniqueRequest, opts ...grpc.CallOption) (*CreateUniqueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUniqueResponse)
	err := c.cc.Invoke(ctx, UniqueService_CreateUnique_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniqueServiceClient) UpdateUnique(ctx context.Context, in *UpdateUniqueRequest, opts ...grpc.CallOption) (*UpdateUniqueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUniqueResponse)
	err := c.cc.Invoke(ctx, UniqueService_UpdateUnique_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniqueServiceClient) DeleteUnique(ctx context.Context, in *DeleteUniqueRequest, opts ...grpc.CallOption) (*DeleteUniqueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUniqueResponse)
	err := c.cc.Invoke(ctx, UniqueService_DeleteUnique_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniqueServiceClient) ListUnique(ctx context.Context, in *ListUniqueRequest, opts ...grpc.CallOption) (*ListUniquesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUniquesResponse)
	err := c.cc.Invoke(ctx, UniqueService_ListUnique_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniqueServiceClient) GetUnique(ctx context.Context, in *GetUniqueRequest, opts ...grpc.CallOption) (*GetUniqueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUniqueResponse)
	err := c.cc.Invoke(ctx, UniqueService_GetUnique_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UniqueServiceServer is the server API for UniqueService service.
// All implementations must embed UnimplementedUniqueServiceServer
// for forward compatibility.
type UniqueServiceServer interface {
	CreateUnique(context.Context, *CreateUniqueRequest) (*CreateUniqueResponse, error)
	UpdateUnique(context.Context, *UpdateUniqueRequest) (*UpdateUniqueResponse, error)
	DeleteUnique(context.Context, *DeleteUniqueRequest) (*DeleteUniqueResponse, error)
	ListUnique(context.Context, *ListUniqueRequest) (*ListUniquesResponse, error)
	GetUnique(context.Context, *GetUniqueRequest) (*GetUniqueResponse, error)
	mustEmbedUnimplementedUniqueServiceServer()
}

// UnimplementedUniqueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUniqueServiceServer struct{}

func (UnimplementedUniqueServiceServer) CreateUnique(context.Context, *CreateUniqueRequest) (*CreateUniqueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnique not implemented")
}
func (UnimplementedUniqueServiceServer) UpdateUnique(context.Context, *UpdateUniqueRequest) (*UpdateUniqueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnique not implemented")
}
func (UnimplementedUniqueServiceServer) DeleteUnique(context.Context, *DeleteUniqueRequest) (*DeleteUniqueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUnique not implemented")
}
func (UnimplementedUniqueServiceServer) ListUnique(context.Context, *ListUniqueRequest) (*ListUniquesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnique not implemented")
}
func (UnimplementedUniqueServiceServer) GetUnique(context.Context, *GetUniqueRequest) (*GetUniqueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnique not implemented")
}
func (UnimplementedUniqueServiceServer) mustEmbedUnimplementedUniqueServiceServer() {}
func (UnimplementedUniqueServiceServer) testEmbeddedByValue()                       {}

// UnsafeUniqueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniqueServiceServer will
// result in compilation errors.
type UnsafeUniqueServiceServer interface {
	mustEmbedUnimplementedUniqueServiceServer()
}

func RegisterUniqueServiceServer(s grpc.ServiceRegistrar, srv UniqueServiceServer) {
	// If the following call pancis, it indicates UnimplementedUniqueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UniqueService_ServiceDesc, srv)
}

func _UniqueService_CreateUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUniqueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniqueServiceServer).CreateUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniqueService_CreateUnique_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniqueServiceServer).CreateUnique(ctx, req.(*CreateUniqueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniqueService_UpdateUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUniqueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniqueServiceServer).UpdateUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniqueService_UpdateUnique_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniqueServiceServer).UpdateUnique(ctx, req.(*UpdateUniqueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniqueService_DeleteUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUniqueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniqueServiceServer).DeleteUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniqueService_DeleteUnique_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniqueServiceServer).DeleteUnique(ctx, req.(*DeleteUniqueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniqueService_ListUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUniqueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniqueServiceServer).ListUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniqueService_ListUnique_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniqueServiceServer).ListUnique(ctx, req.(*ListUniqueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniqueService_GetUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUniqueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniqueServiceServer).GetUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniqueService_GetUnique_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniqueServiceServer).GetUnique(ctx, req.(*GetUniqueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UniqueService_ServiceDesc is the grpc.ServiceDesc for UniqueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UniqueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "unique.UniqueService",
	HandlerType: (*UniqueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUnique",
			Handler:    _UniqueService_CreateUnique_Handler,
		},
		{
			MethodName: "UpdateUnique",
			Handler:    _UniqueService_UpdateUnique_Handler,
		},
		{
			MethodName: "DeleteUnique",
			Handler:    _UniqueService_DeleteUnique_Handler,
		},
		{
			MethodName: "ListUnique",
			Handler:    _UniqueService_ListUnique_Handler,
		},
		{
			MethodName: "GetUnique",
			Handler:    _UniqueService_GetUnique_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "unique.proto",
}
