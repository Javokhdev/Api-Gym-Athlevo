// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: gym.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GymService_CreateGym_FullMethodName = "/gym.GymService/CreateGym"
	GymService_UpdateGym_FullMethodName = "/gym.GymService/UpdateGym"
	GymService_DeleteGym_FullMethodName = "/gym.GymService/DeleteGym"
	GymService_ListGym_FullMethodName   = "/gym.GymService/ListGym"
	GymService_GetGym_FullMethodName    = "/gym.GymService/GetGym"
)

// GymServiceClient is the client API for GymService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GymServiceClient interface {
	CreateGym(ctx context.Context, in *CreateGymRequest, opts ...grpc.CallOption) (*CreateGymResponse, error)
	UpdateGym(ctx context.Context, in *UpdateGymRequest, opts ...grpc.CallOption) (*UpdateGymResponse, error)
	DeleteGym(ctx context.Context, in *DeleteGymRequest, opts ...grpc.CallOption) (*DeleteGymResponse, error)
	ListGym(ctx context.Context, in *ListGymRequest, opts ...grpc.CallOption) (*ListGymResponse, error)
	GetGym(ctx context.Context, in *GetGymRequest, opts ...grpc.CallOption) (*GetGymResponse, error)
}

type gymServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGymServiceClient(cc grpc.ClientConnInterface) GymServiceClient {
	return &gymServiceClient{cc}
}

func (c *gymServiceClient) CreateGym(ctx context.Context, in *CreateGymRequest, opts ...grpc.CallOption) (*CreateGymResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGymResponse)
	err := c.cc.Invoke(ctx, GymService_CreateGym_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gymServiceClient) UpdateGym(ctx context.Context, in *UpdateGymRequest, opts ...grpc.CallOption) (*UpdateGymResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGymResponse)
	err := c.cc.Invoke(ctx, GymService_UpdateGym_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gymServiceClient) DeleteGym(ctx context.Context, in *DeleteGymRequest, opts ...grpc.CallOption) (*DeleteGymResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGymResponse)
	err := c.cc.Invoke(ctx, GymService_DeleteGym_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gymServiceClient) ListGym(ctx context.Context, in *ListGymRequest, opts ...grpc.CallOption) (*ListGymResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGymResponse)
	err := c.cc.Invoke(ctx, GymService_ListGym_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gymServiceClient) GetGym(ctx context.Context, in *GetGymRequest, opts ...grpc.CallOption) (*GetGymResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGymResponse)
	err := c.cc.Invoke(ctx, GymService_GetGym_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GymServiceServer is the server API for GymService service.
// All implementations must embed UnimplementedGymServiceServer
// for forward compatibility.
type GymServiceServer interface {
	CreateGym(context.Context, *CreateGymRequest) (*CreateGymResponse, error)
	UpdateGym(context.Context, *UpdateGymRequest) (*UpdateGymResponse, error)
	DeleteGym(context.Context, *DeleteGymRequest) (*DeleteGymResponse, error)
	ListGym(context.Context, *ListGymRequest) (*ListGymResponse, error)
	GetGym(context.Context, *GetGymRequest) (*GetGymResponse, error)
	mustEmbedUnimplementedGymServiceServer()
}

// UnimplementedGymServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGymServiceServer struct{}

func (UnimplementedGymServiceServer) CreateGym(context.Context, *CreateGymRequest) (*CreateGymResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGym not implemented")
}
func (UnimplementedGymServiceServer) UpdateGym(context.Context, *UpdateGymRequest) (*UpdateGymResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGym not implemented")
}
func (UnimplementedGymServiceServer) DeleteGym(context.Context, *DeleteGymRequest) (*DeleteGymResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGym not implemented")
}
func (UnimplementedGymServiceServer) ListGym(context.Context, *ListGymRequest) (*ListGymResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGym not implemented")
}
func (UnimplementedGymServiceServer) GetGym(context.Context, *GetGymRequest) (*GetGymResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGym not implemented")
}
func (UnimplementedGymServiceServer) mustEmbedUnimplementedGymServiceServer() {}
func (UnimplementedGymServiceServer) testEmbeddedByValue()                    {}

// UnsafeGymServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GymServiceServer will
// result in compilation errors.
type UnsafeGymServiceServer interface {
	mustEmbedUnimplementedGymServiceServer()
}

func RegisterGymServiceServer(s grpc.ServiceRegistrar, srv GymServiceServer) {
	// If the following call pancis, it indicates UnimplementedGymServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GymService_ServiceDesc, srv)
}

func _GymService_CreateGym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGymRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GymServiceServer).CreateGym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GymService_CreateGym_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GymServiceServer).CreateGym(ctx, req.(*CreateGymRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GymService_UpdateGym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGymRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GymServiceServer).UpdateGym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GymService_UpdateGym_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GymServiceServer).UpdateGym(ctx, req.(*UpdateGymRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GymService_DeleteGym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGymRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GymServiceServer).DeleteGym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GymService_DeleteGym_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GymServiceServer).DeleteGym(ctx, req.(*DeleteGymRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GymService_ListGym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGymRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GymServiceServer).ListGym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GymService_ListGym_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GymServiceServer).ListGym(ctx, req.(*ListGymRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GymService_GetGym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGymRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GymServiceServer).GetGym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GymService_GetGym_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GymServiceServer).GetGym(ctx, req.(*GetGymRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GymService_ServiceDesc is the grpc.ServiceDesc for GymService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GymService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gym.GymService",
	HandlerType: (*GymServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGym",
			Handler:    _GymService_CreateGym_Handler,
		},
		{
			MethodName: "UpdateGym",
			Handler:    _GymService_UpdateGym_Handler,
		},
		{
			MethodName: "DeleteGym",
			Handler:    _GymService_DeleteGym_Handler,
		},
		{
			MethodName: "ListGym",
			Handler:    _GymService_ListGym_Handler,
		},
		{
			MethodName: "GetGym",
			Handler:    _GymService_GetGym_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gym.proto",
}
